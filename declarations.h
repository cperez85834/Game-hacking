#include "skillinfo.h"
using namespace std;

/*short lootTable[43] = { 11162, 11166, 16208, 19008, 0x3091, 0x3092, 0x3093, 0x3094, 0x3095,
 0x3096, 0x3097, 0x3098, 0x3099, 0x309a, 0x309b, 0x309C, 0x23E0, 0x0BF5, 3227, 4503, 62835, 8019, 8022, 8025, 8035, 8034, 3503,
9320, 3508, 3509, 8036, 8037, 8038, 8039, 8040, 8041, 8042, 8043, 8044, 3061, 40501, 40502, 874};*/
//short lootTable[7] = { 3061,  874, 3503, 11162, 11166, 16208, 19008}; //hq jelly, charms, t4 hp, hats
//short lootTable[1] = { 9184 };
short lootTable[20] = { 3191, 3192, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
bool LOOTTRAVEL = false;
float TRAVELX;
float TRAVELY;
HWND hwndList[500] = { 0 };
int herbs[20] = { 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
int mushrooms[20] = { 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int ores[20] = { 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
int trees[20] = { 5010, 5011, 5012, 5013, 5014, 5015, 5016, 5017, 5018, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
//quest pickaxe
//T6 HP potions
//Tradable bright crystal bijou
//Tradable crystal bijou
//T5 xir recipe
//T5 lix recipe
//T5 elrue recipe
//All T6 scrolls
//zombie crystal
//hq slime jelly
//quests hoe
//short lootTable[1] = { 0x23E0 }; // zombie crystal

//COFFINS
//8568 = izyel pieces
//8566 = end coffin
//8539 = end box

//account stuff
bool SLOW = 0;
CHAR* accounts[6] = { "wowgreatdc", "beegeemang2", "beegeemang1", "anteaterbatman", "mistermangos", "fiestarena1" };
CHAR* passwords[2] = { "iluvn00dles", "HelloMoto" };
POINT characterClick[6] = { { 87, 440 }, { 344, 343 }, { 526, 342 }, { 855, 366 }, { 736, 470 }, { 620, 577 } };
bool serverPick = false;
bool characterPick = false;


BYTE binSpoof[0x42] = { 0x65, 0x0C, 0x35, 0x34, 0x37, 0x39, 0x33, 0x65, 0x63, 0x35, 0x64, 0x39, 0x66, 0x64, 0x62, 0x32,
0x33, 0x32, 0x37, 0x61, 0x63, 0x66, 0x63, 0x37, 0x31, 0x38, 0x61, 0x32, 0x36, 0x31, 0x39, 0x33,
0x65, 0x32, 0x00, 0xAD, 0x91, 0x75, 0x40, 0x14, 0x6B, 0x03, 0x90, 0xAD, 0x91, 0x75, 0xD8, 0xFA,
0xFA, 0x00, 0xD5, 0xE8, 0xAE, 0x00, 0xF4, 0x70, 0x77, 0x03, 0xF9, 0x70, 0x77, 0x03, 0x00, 0x00,
0x00, 0x00};

BYTE encryptionTable[0x1F3] = {
	0x07, 0x59, 0x69, 0x4A, 0x94, 0x11, 0x94, 0x85, 0x8C, 0x88, 0x05, 0xCB, 0xA0, 0x9E, 0xCD, 0x58,
	0x3A, 0x36, 0x5B, 0x1A, 0x6A, 0x16, 0xFE, 0xBD, 0xDF, 0x94, 0x02, 0xF8, 0x21, 0x96, 0xC8, 0xE9,
	0x9E, 0xF7, 0xBF, 0xBD, 0xCF, 0xCD, 0xB2, 0x7A, 0x00, 0x9F, 0x40, 0x22, 0xFC, 0x11, 0xF9, 0x0C,
	0x2E, 0x12, 0xFB, 0xA7, 0x74, 0x0A, 0x7D, 0x78, 0x40, 0x1E, 0x2C, 0xA0, 0x2D, 0x06, 0xCB, 0xA8,
	0xB9, 0x7E, 0xEF, 0xDE, 0x49, 0xEA, 0x4E, 0x13, 0x16, 0x16, 0x80, 0xF4, 0x3D, 0xC2, 0x9A, 0xD4,
	0x86, 0xD7, 0x94, 0x24, 0x17, 0xF4, 0xD6, 0x65, 0xBD, 0x3F, 0xDB, 0xE4, 0xE1, 0x0F, 0x50, 0xF6,
	0xEC, 0x7A, 0x9A, 0x0C, 0x27, 0x3D, 0x24, 0x66, 0xD3, 0x22, 0x68, 0x9C, 0x9A, 0x52, 0x0B, 0xE0,
	0xF9, 0xA5, 0x0B, 0x25, 0xDA, 0x80, 0x49, 0x0D, 0xFD, 0x3E, 0x77, 0xD1, 0x56, 0xA8, 0xB7, 0xF4,
	0x0F, 0x9B, 0xE8, 0x0F, 0x52, 0x47, 0xF5, 0x6F, 0x83, 0x20, 0x22, 0xDB, 0x0F, 0x0B, 0xB1, 0x43,
	0x85, 0xC1, 0xCB, 0xA4, 0x0B, 0x02, 0x19, 0xDF, 0xF0, 0x8B, 0xEC, 0xDB, 0x6C, 0x6D, 0x66, 0xAD,
	0x45, 0xBE, 0x89, 0x14, 0x7E, 0x2F, 0x89, 0x10, 0xB8, 0x93, 0x60, 0xD8, 0x60, 0xDE, 0xF6, 0xFE,
	0x6E, 0x9B, 0xCA, 0x06, 0xC1, 0x75, 0x95, 0x33, 0xCF, 0xC0, 0xB2, 0xE0, 0xCC, 0xA5, 0xCE, 0x12,
	0xF6, 0xE5, 0xB5, 0xB4, 0x26, 0xC5, 0xB2, 0x18, 0x4F, 0x2A, 0x5D, 0x26, 0x1B, 0x65, 0x4D, 0xF5,
	0x45, 0xC9, 0x84, 0x14, 0xDC, 0x7C, 0x12, 0x4B, 0x18, 0x9C, 0xC7, 0x24, 0xE7, 0x3C, 0x64, 0xFF,
	0xD6, 0x3A, 0x2C, 0xEE, 0x8C, 0x81, 0x49, 0x39, 0x6C, 0xB7, 0xDC, 0xBD, 0x94, 0xE2, 0x32, 0xF7,
	0xDD, 0x0A, 0xFC, 0x02, 0x01, 0x64, 0xEC, 0x4C, 0x94, 0x0A, 0xB1, 0x56, 0xF5, 0xC9, 0xA9, 0x34,
	0xDE, 0x0F, 0x38, 0x27, 0xBC, 0x81, 0x30, 0x0F, 0x7B, 0x38, 0x25, 0xFE, 0xE8, 0x3E, 0x29, 0xBA,
	0x55, 0x43, 0xBF, 0x6B, 0x9F, 0x1F, 0x8A, 0x49, 0x52, 0x18, 0x7F, 0x8A, 0xF8, 0x88, 0x24, 0x5C,
	0x4F, 0xE1, 0xA8, 0x30, 0x87, 0x8E, 0x50, 0x1F, 0x2F, 0xD1, 0x0C, 0xB4, 0xFD, 0x0A, 0xBC, 0xDC,
	0x12, 0x85, 0xE2, 0x52, 0xEE, 0x4A, 0x58, 0x38, 0xAB, 0xFF, 0xC6, 0x3D, 0xB9, 0x60, 0x64, 0x0A,
	0xB4, 0x50, 0xD5, 0x40, 0x89, 0x17, 0x9A, 0xD5, 0x85, 0xCF, 0xEC, 0x0D, 0x7E, 0x81, 0x7F, 0xE3,
	0xC3, 0x04, 0x01, 0x22, 0xEC, 0x27, 0xCC, 0xFA, 0x3E, 0x21, 0xA6, 0x54, 0xC8, 0xDE, 0x00, 0xB6,
	0xDF, 0x27, 0x9F, 0xF6, 0x25, 0x34, 0x07, 0x85, 0xBF, 0xA7, 0xA5, 0xA5, 0xE0, 0x83, 0x0C, 0x3D,
	0x5D, 0x20, 0x40, 0xAF, 0x60, 0xA3, 0x64, 0x56, 0xF3, 0x05, 0xC4, 0x1C, 0x7D, 0x37, 0x98, 0xC3,
	0xE8, 0x5A, 0x6E, 0x58, 0x85, 0xA4, 0x9A, 0x6B, 0x6A, 0xF4, 0xA3, 0x7B, 0x61, 0x9B, 0x09, 0x40,
	0x1E, 0x60, 0x4B, 0x32, 0xD9, 0x51, 0xA4, 0xFE, 0xF9, 0x5D, 0x4E, 0x4A, 0xFB, 0x4A, 0xD4, 0x7C,
	0x33, 0x02, 0x33, 0xD5, 0x9D, 0xCE, 0x5B, 0xAA, 0x5A, 0x7C, 0xD8, 0xF8, 0x05, 0xFA, 0x1F, 0x2B,
	0x8C, 0x72, 0x57, 0x50, 0xAE, 0x6C, 0x19, 0x89, 0xCA, 0x01, 0xFC, 0xFC, 0x29, 0x9B, 0x61, 0x12,
	0x68, 0x63, 0x65, 0x46, 0x26, 0xC4, 0x5B, 0x50, 0xAA, 0x2B, 0xBE, 0xEF, 0x9A, 0x79, 0x02, 0x23,
	0x75, 0x2C, 0x20, 0x13, 0xFD, 0xD9, 0x5A, 0x76, 0x23, 0xF1, 0x0B, 0xB5, 0xB8, 0x59, 0xF9, 0x9F,
	0x7A, 0xE6, 0x06, 0xE9, 0xA5, 0x3A, 0xB4, 0x50, 0xBF, 0x16, 0x58, 0x98, 0xB3, 0x9A, 0x6E, 0x36,
	0xEE, 0x8D, 0xEB };

char masterSpam[43] = { 0x2a, 0x01, 0x94, 0x63, 0x75, 0x63, 0x6b, 0x6d, 0x61, 0x73, 0x74, 0x65, 0x72, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x48, 0x65, 0x6c, 0x70, 0x4f, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };

char whispy[31] = { 0x1e, 0x0c, 0x20, 0xFF, 0x78, 0x6f, 0x72, 0x62, 0x6f, 0x61, 0x72, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x53, 0x55, 0x50, 0x53, 0x55, 0x50 };

struct dropInfo{
	short itemID;
	short dropID;
	float distance;
};

//Base Pointers
DWORD fiestaBase;
DWORD *playerBase;
DWORD entityPointer;

//Character Value
float* yaw;
DWORD *health;
DWORD *maxhealth;
DWORD *partyMemberHP;
DWORD *partyMemberMaxHP;
//WORD* mountStatus;
float *mountStatus;
WORD unmountStatus = 0;
unsigned char partyMemberID[2] = { 0 };
DWORD *lp;
DWORD *targetofTargetID;
DWORD *mana;
DWORD* battleState;
DWORD *maxmana;
DWORD *name;
unsigned char playerID[2] = { 0xFF, 0xFF };
float *playerX;
float *playerY;
DWORD *playerZ;
float lastPosX;
float lastPosY;
int lastMana = 0;
skill *lastSkill = NULL;
bool characterSelect = false;
bool mapSwitch = false;

bool hijackMove = false;
float moveX = 0;
float moveY = 0;
float initialX = 0;
float initialY = 0;
float killRadius = 1500;

BYTE dropNumber;
DWORD zoom;
DWORD *questPointer;
DWORD *questNumberPointer;
DWORD* encryptCounterstatic;
//text stuff
/*3d 0c 6c 5e 00 38 48 61 68 21 20 57 68 61 74 20 =.l^.8Hah! What  BOXES TEXT
69 73 20 74 68 69 73 3f 20 48 6f 77 20 64 61 72 is this? How dar
65 20 74 68 65 79 20 70 6c 61 79 20 77 69 74 68 e they play with
20 75 73 20 6c 69 6b 65 20 74 68 69 73 3f us like this?*/

//Drop stuff
DWORD *dropPointer;
DWORD dropReference = 0;
bool enableDropTrack = false;
float dropX;
float dropY;
BYTE dropID[2];
BYTE itemID[2];
IDtoBYTE dropstuff;
dropInfo currentDrop;
dropInfo lastDrop;
LARGE_INTEGER LOOTtcounter;
LONGLONG LOOTticknow, LOOTtickLoot;
LONGLONG LOOTfreq;
LARGE_INTEGER timerTcounter;
LONGLONG timerInitialTick, timerElapsed;
LONGLONG timerFreq;

bool startLoot = false;
bool startAttack = false;
bool restrictLoot = true;
bool restrictLootY = 5100;
//DWORD *dropX;
//DWORD *dropY;
//DWORD *dropID;
//DWORD *dropItem;

//timer stuff

//party stuff
bool notInParty = false;
bool ccFull = false;
bool receivedPInvite = false;
bool acceptedPInvite = false;
bool inParty = false;
bool goinCC = false;
bool gooutCC = false;
bool castAoe = false;
bool moveUP = false;
bool ccMessageBox = false;
bool nooneMessageBox = false;
WORD buffEm[200] = { 0 };
char talkToCC[5] = { 0x04, 0x0a, 0x20, 0x03, 0x43 };
char acceptMessageBox[4] = { 0x03, 0x02, 0x3c, 0x00 };
char inParty_chat[7] = { 0x06, 0x14, 0x20, 0x00, 0x02, 0x69, 0x6e };
char upParty_chat[7] = { 0x06, 0x14, 0x20, 0x00, 0x02, 0x75, 0x70 };
char goParty_chat[7] = { 0x06, 0x14, 0x20, 0x00, 0x02, 0x67, 0x6f };
char outParty_chat[8] = { 0x07, 0x14, 0x20, 0x00, 0x03, 0x6f, 0x75, 0x74 };
char aoeParty_chat[8] = { 0x07, 0x14, 0x20, 0x00, 0x03, 0x61, 0x6f, 0x65 };
char lootParty_chat[9] = { 0x08, 0x14, 0x20, 0x00, 0x04, 0x6c, 0x6f, 0x6f, 0x74 };
char lootallParty_chat[12] = { 0x0b, 0x14, 0x20, 0x00, 0x07, 0x6c, 0x6f, 0x6f, 0x74, 0x61, 0x6c, 0x6c };

//dialogue stuff
bool receivedDialogue = false;
bool coffinOrBox = false;

//Hook stuff
BYTE hook[6];
BYTE hook2[6];
BYTE hook3[6];
BYTE jmp[6] = { 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc3 };
BYTE jmp2[6] = { 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc3 };
BYTE jmp3[6] = { 0xe9, 0x00, 0x00, 0x00, 0x00, 0xc3 };
DWORD jmpBackEncryptRNG;
DWORD jmpBackAddyMove;
DWORD jmpBackAddy;
DWORD jmpBackAddyDrops;

ofstream myfileSend, myfileRecv, myfileSend_new;
DWORD pPrevious, packetLoc = 0, prevpacketLoc = 0;
unsigned char packetByte[1024] = { 0 };
unsigned char packetByte_socket[1024] = { 0 };
unsigned char lastPacket[1024] = { 0 };
unsigned char* packetStart = packetByte;
unsigned char packetSize;
unsigned char newByte = 0;
unsigned int newByte_counter = 0;
SOCKET sendSocket = 0;
volatile bool sending = false;
volatile bool GreatVariable = true;
bool setup = false;
DWORD lace = 0x0FFF;
DWORD* encryptCounterAddy = NULL; //address of the encryption table is stored
DWORD* encryptCounterAddy_Invite = NULL; //address of the encryption table is stored
DWORD* encryptCounterstatic_Invite;
WORD lace_counter = 0x0FFF; //Counter of the encryption table

//console stuff
FILE *pFile_o = nullptr;
FILE *pFile_i = nullptr;
unsigned int sendSocket_r = 0, sendSocket_r_Invite = 0, spoofSocket = 0;

//skill


//mob stuff
DWORD lastEntity = 0;
bool stolenAggro = false;
bool monsterTooFar = false;
struct point{
	float x;
	float y;
};
int marloneCounter = -1;

//DRIVER STUFF
#define WHILE(constant) \
	__pragma(warning(disable: 4127)) while (constant); __pragma(warning(default: 4127))

DEFINE_GUID(GUID_DEVINTERFACE_KBFILTER,
	0x3fb7299d, 0x6847, 0x4490, 0xb0, 0xc9, 0x99, 0xe0, 0x98, 0x6a, 0xb8, 0x86);
// {3FB7299D-6847-4490-B0C9-99E0986AB886}

DEFINE_GUID(GUID_DEVINTERFACE_MOUFILTER, /* bfa25f02-9388-4831-bac0-99b58132877d */
	0xbfa25f02, 0x9388, 0x4831, 0xba, 0xc0, 0x99, 0xb5, 0x81, 0x32, 0x87, 0x7d);

HANDLE file_kbd, file_mou;

